---
// src/pages/index.astro
import Layout from '../layouts/Layout.astro';
import Header from '../components/Header.astro';
import ExerciseTracker from '../components/ExerciseTracker';
import WelcomeBanner from '../components/WelcomeBanner';
import WeeklyStreak from '../components/WeeklyStreak';
import DailyCompletions from '../components/DailyCompletions';
import QuickStats from '../components/QuickStats';
import { supabase } from '../lib/supabase';

// Check if user is authenticated
const { cookies, redirect } = Astro;

const accessToken = cookies.get('sb-access-token');
const refreshToken = cookies.get('sb-refresh-token');

let user = null;
let profile = null;
let activeChallenges = [];
let availableChallenges = [];

if (accessToken && refreshToken) {
  const { data } = await supabase.auth.setSession({
    access_token: accessToken.value,
    refresh_token: refreshToken.value
  });
  
  user = data.user;
} else {
  return redirect('/auth');
}

// Get user profile and challenges
if (user) {
  // Get user profile
  const { data: profileData } = await supabase
    .from('profiles')
    .select('*')
    .eq('id', user.id)
    .single();
    
  profile = profileData;
  
  // Get current date for filtering active challenges
  const today = new Date().toISOString().split('T')[0];
  
  // Get challenges the user has joined
  const { data: participantData } = await supabase
    .from('challenge_participants')
    .select(`
      challenge_id,
      challenges:challenge_id (
        id, title, description, exercise_type, goal_type, goal_value, start_date, end_date
      )
    `)
    .eq('user_id', user.id);
    
  // Filter for active challenges (started but not ended)
  const userChallengeIds = [];
  
  if (participantData) {
    activeChallenges = participantData
      .filter(p => p.challenges.start_date <= today && p.challenges.end_date >= today)
      .map(p => p.challenges);
      
    // Store all user challenge IDs for filtering available challenges
    userChallengeIds.push(...participantData.map(p => p.challenges.id));
  }
  
  // Get available challenges that user hasn't joined yet
  const { data: allChallenges } = await supabase
    .from('challenges')
    .select('*')
    .gte('end_date', today) // Only show challenges that haven't ended
    .order('start_date', { ascending: true });
    
  if (allChallenges) {
    availableChallenges = allChallenges
      .filter(challenge => !userChallengeIds.includes(challenge.id))
      .slice(0, 3); // Limit to 3 challenges for the homepage
  }
}
---

<Layout title="Dashboard - FitChallenge">
  <Header activePage="home" />

  <main>
    <div class="container">
      <section class="page-header">
        <h1>Welcome, {profile?.username || 'Fitness Enthusiast'}</h1>
        <p class="subtitle">Track your progress and join challenges to stay motivated</p>
      </section>
      
      {activeChallenges.length === 0 && (
        <WelcomeBanner client:load username={profile?.username} />
      )}
      
      <div class="dashboard-layout">
        <div class="main-content">
          <section class="section active-challenges">
            <h2>Today's Exercises</h2>
            
            <ExerciseTracker client:load />
          </section>
          
          <section class="section weekly-activity">
            <h2>Activity Streak</h2>
            
            <WeeklyStreak client:load userId={user?.id} />
          </section>
          
          <section class="section daily-champions">
            <DailyCompletions client:load />
          </section>
        </div>
        
        <div class="sidebar">
          <section class="section suggested-challenges">
            <h2>Suggested Challenges</h2>
            
            {availableChallenges.length > 0 ? (
              <div class="challenge-suggestions">
                {availableChallenges.map(challenge => (
                  <div class="suggestion-card">
                    <div class="suggestion-header">
                      <span class="suggestion-type">{challenge.exercise_type}</span>
                      <h3>{challenge.title}</h3>
                    </div>
                    
                    <div class="suggestion-body">
                      <div class="suggestion-meta">
                        <div class="meta-item">
                          <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
                            <line x1="16" y1="2" x2="16" y2="6"></line>
                            <line x1="8" y1="2" x2="8" y2="6"></line>
                            <line x1="3" y1="10" x2="21" y2="10"></line>
                          </svg>
                          <span>
                            {new Date(challenge.start_date).toLocaleDateString()} - 
                            {new Date(challenge.end_date).toLocaleDateString()}
                          </span>
                        </div>
                        <div class="meta-item">
                          <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <polyline points="22 12 18 12 15 21 9 3 6 12 2 12"></polyline>
                          </svg>
                          <span>
                            Goal: {challenge.goal_value} {challenge.goal_type.replace('_', ' ')}
                          </span>
                        </div>
                      </div>
                      
                      <button class="btn btn-primary btn-sm join-challenge-btn" data-id={challenge.id}>
                        Join Challenge
                      </button>
                    </div>
                  </div>
                ))}
                
                <a href="/challenges" class="view-all-link">
                  View all available challenges
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path d="M5 12h14"></path>
                    <path d="M12 5l7 7-7 7"></path>
                  </svg>
                </a>
              </div>
            ) : (
              <div class="empty-suggestions">
                <p>No new challenges available at the moment.</p>
                <a href="/challenges" class="btn btn-outline btn-sm">Browse All Challenges</a>
              </div>
            )}
          </section>
          
          <section class="section quick-stats">
            <h2>Your Stats</h2>
            <QuickStats client:load userId={user?.id} />
          </section>
        </div>
      </div>
    </div>
  </main>
</Layout>

<script define:vars={{ userId: user?.id }}>
  // Handle join challenge buttons
  document.querySelectorAll('.join-challenge-btn').forEach(button => {
    button.addEventListener('click', async () => {
      const challengeId = button.getAttribute('data-id');
      button.disabled = true;
      button.textContent = 'Joining...';
      
      try {
        const { error } = await supabase
          .from('challenge_participants')
          .insert([
            { challenge_id: challengeId, user_id: userId }
          ]);
          
        if (error) throw error;
        
        // Reload page to show updated challenges
        window.location.reload();
      } catch (err) {
        console.error('Error joining challenge:', err);
        alert('Error joining challenge: ' + err.message);
        button.disabled = false;
        button.textContent = 'Join Challenge';
      }
    });
  });
</script>

<style>
  main {
    padding: var(--spacing-xl) 0;
  }
  
  .page-header {
    margin-bottom: var(--spacing-xl);
  }
  
  .page-header h1 {
    margin-bottom: var(--spacing-xs);
  }
  
  .subtitle {
    color: var(--color-text-light);
    margin-bottom: 0;
  }
  
  .dashboard-layout {
    display: grid;
    grid-template-columns: 2fr 1fr;
    gap: var(--spacing-xl);
  }
  
  .section {
    margin-bottom: var(--spacing-xl);
  }
  
  .section h2 {
    font-size: 1.25rem;
    margin-bottom: var(--spacing-md);
  }
  
  .daily-champions {
    /* No top margin because the component has its own header */
    margin-top: 0;
  }
  
  .challenge-suggestions {
    display: flex;
    flex-direction: column;
    gap: var(--spacing-md);
  }
  
  .suggestion-card {
    background-color: var(--color-white);
    border-radius: var(--radius-md);
    overflow: hidden;
    box-shadow: var(--shadow-sm);
  }
  
  .suggestion-header {
    padding: var(--spacing-md);
    border-bottom: 1px solid var(--color-border);
  }
  
  .suggestion-type {
    display: inline-block;
    padding: 0.2rem 0.5rem;
    background-color: var(--color-background);
    border-radius: var(--radius-sm);
    font-size: 0.75rem;
    color: var(--color-text-light);
    margin-bottom: var(--spacing-xs);
    text-transform: capitalize;
  }
  
  .suggestion-header h3 {
    margin: 0;
    font-size: 1.1rem;
  }
  
  .suggestion-body {
    padding: var(--spacing-md);
  }
  
  .suggestion-meta {
    margin-bottom: var(--spacing-md);
  }
  
  .meta-item {
    display: flex;
    align-items: center;
    gap: var(--spacing-xs);
    color: var(--color-text-light);
    font-size: 0.85rem;
    margin-bottom: var(--spacing-xs);
  }
  
  .join-challenge-btn {
    width: 100%;
  }
  
  .view-all-link {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: var(--spacing-xs);
    margin-top: var(--spacing-sm);
    color: var(--color-primary);
    font-size: 0.875rem;
    font-weight: 500;
  }
  
  .empty-suggestions {
    background-color: var(--color-white);
    padding: var(--spacing-md);
    border-radius: var(--radius-md);
    text-align: center;
    box-shadow: var(--shadow-sm);
  }
  
  .empty-suggestions p {
    color: var(--color-text-light);
    margin-bottom: var(--spacing-md);
  }
  
  .stats-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
    gap: var(--spacing-md);
  }
  
  .stat-card {
    background-color: var(--color-white);
    border-radius: var(--radius-md);
    padding: var(--spacing-md);
    text-align: center;
    box-shadow: var(--shadow-sm);
  }
  
  .stat-value {
    font-size: 1.75rem;
    font-weight: 700;
    color: var(--color-primary);
    line-height: 1.2;
  }
  
  .stat-label {
    font-size: 0.75rem;
    color: var(--color-text-light);
  }
  
  .error-message {
    color: var(--color-error);
    text-align: center;
    padding: var(--spacing-md);
  }
  
  /* Skeleton loading */
  .skeleton {
    position: relative;
    overflow: hidden;
  }
  
  .skeleton::after {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(90deg, 
      var(--color-background) 0%, 
      var(--color-white) 50%, 
      var(--color-background) 100%
    );
    background-size: 200% 100%;
    animation: loading 1.5s infinite;
  }
  
  .skeleton-text {
    height: 1.2em;
    border-radius: var(--radius-sm);
    background-color: var(--color-background);
    margin-bottom: 0.5em;
  }
  
  .skeleton-text:last-child {
    margin-bottom: 0;
    width: 70%;
  }
  
  @keyframes loading {
    0% {
      background-position: 200% 0;
    }
    100% {
      background-position: -200% 0;
    }
  }
  
  @media (max-width: 1024px) {
    .dashboard-layout {
      grid-template-columns: 1fr;
      gap: var(--spacing-lg);
    }
    
    .sidebar {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: var(--spacing-lg);
    }
  }
  
  @media (max-width: 768px) {
    .sidebar {
      grid-template-columns: 1fr;
    }
  }
</style>