---
// src/pages/auth.astro
import Layout from '../layouts/Layout.astro';
---

<Layout title="Login or Sign Up - FitChallenge">
  <main class="auth-page">
    <div class="auth-container">
      <div class="auth-form">
        <div class="auth-header">
          <h1 class="auth-title">FitChallenge</h1>
          <p class="auth-subtitle">Track your fitness goals and challenge friends</p>
        </div>
        
        <div id="auth-form-container"></div>
      </div>
    </div>
  </main>
</Layout>

<script>
  import { supabase } from '../lib/supabase';
  
  // Check for existing session first
  const checkSession = async () => {
    try {
      const { data } = await supabase.auth.getSession();
      
      if (data?.session) {
        // User is already logged in, redirect to home
        window.location.href = '/';
      } else {
        // Render the auth form
        renderAuthForm();
      }
    } catch (error) {
      console.error('Error checking session:', error);
      renderAuthForm();
    }
  };
  
  // Render the authentication form
  const renderAuthForm = () => {
    const container = document.getElementById('auth-form-container');
    if (!container) return;
    
    // Initial state is login
    let authMode = 'login';
    
    // Render function that will be called whenever we need to update the form
    const renderForm = () => {
      const isLogin = authMode === 'login';
      
      container.innerHTML = `
        <h2>${isLogin ? 'Welcome back' : 'Create an account'}</h2>
        
        <form id="auth-form">
          <div class="form-group">
            <label for="email" class="form-label">Email</label>
            <input
              id="email"
              type="email"
              class="form-control"
              placeholder="Enter your email"
              required
            />
          </div>
          
          <div class="form-group">
            <label for="password" class="form-label">Password</label>
            <input
              id="password"
              type="password"
              class="form-control"
              placeholder="Enter your password"
              required
            />
          </div>
          
          <div id="message-container"></div>
          
          <button type="submit" class="btn btn-primary btn-block">
            ${isLogin ? 'Login' : 'Sign Up'}
          </button>
          <div class="forgot-password">
            <a href="/reset-password" class="forgot-password-link">Forgot password?</a>
          </div>
        </form>
        
        <div class="auth-toggle">
          ${isLogin 
            ? "Don't have an account? <button id='switch-to-signup' class='auth-toggle-btn'>Sign Up</button>"
            : "Already have an account? <button id='switch-to-login' class='auth-toggle-btn'>Login</button>"
          }
        </div>
      `;
      
      // Add event listener to form
      document.getElementById('auth-form')?.addEventListener('submit', handleFormSubmit);
      
      // Add event listeners to toggle buttons
      document.getElementById('switch-to-signup')?.addEventListener('click', () => {
        authMode = 'signup';
        renderForm();
      });
      
      document.getElementById('switch-to-login')?.addEventListener('click', () => {
        authMode = 'login';
        renderForm();
      });
    };
    
    // Handle form submission
    const handleFormSubmit = async (e) => {
      e.preventDefault();
      
      const messageContainer = document.getElementById('message-container');
      const email = document.getElementById('email').value;
      const password = document.getElementById('password').value;
      
      // Clear any existing messages
      messageContainer.innerHTML = '';
      
      try {
        // Show loading state
        messageContainer.innerHTML = `
          <div class="alert alert-info">
            Processing your request...
          </div>
        `;
        
        if (authMode === 'login') {
          // Handle login
          const { error, data } = await supabase.auth.signInWithPassword({
            email,
            password,
          });
          
          if (error) throw error;
          
          if (data?.session) {
            // Login successful - set cookies and redirect
            document.cookie = `sb-access-token=${data.session.access_token}; path=/; max-age=${60 * 60 * 24 * 7}`;
            document.cookie = `sb-refresh-token=${data.session.refresh_token}; path=/; max-age=${60 * 60 * 24 * 7}`;
            
            messageContainer.innerHTML = `
              <div class="alert alert-success">
                Login successful! Redirecting...
              </div>
            `;
            
            setTimeout(() => {
              window.location.href = '/';
            }, 1000);
          }
        } else {
          // Handle sign up
          const { error, data } = await supabase.auth.signUp({
            email,
            password,
          });
          
          if (error) throw error;
          
          if (data?.user) {
            if (data.session) {
              // Auto sign-in successful
              document.cookie = `sb-access-token=${data.session.access_token}; path=/; max-age=${60 * 60 * 24 * 7}`;
              document.cookie = `sb-refresh-token=${data.session.refresh_token}; path=/; max-age=${60 * 60 * 24 * 7}`;
              
              messageContainer.innerHTML = `
                <div class="alert alert-success">
                  Account created successfully! Redirecting...
                </div>
              `;
              
              setTimeout(() => {
                window.location.href = '/';
              }, 1000);
            } else {
              // Email confirmation required
              messageContainer.innerHTML = `
                <div class="alert alert-success">
                  Please check your email to confirm your account.
                </div>
              `;
              
              // Switch to login mode
              setTimeout(() => {
                authMode = 'login';
                renderForm();
              }, 3000);
            }
          }
        }
      } catch (error) {
        console.error('Auth error:', error);
        messageContainer.innerHTML = `
          <div class="alert alert-error">
            ${error.message || 'An error occurred during authentication'}
          </div>
        `;
      }
    };
    
    // Initial render
    renderForm();
  };
  
  // Run the session check when the page loads
  checkSession();
</script>

<style>
  .auth-page {
    min-height: 100vh;
    background-color: var(--color-background);
    background-image: url("data:image/svg+xml,%3Csvg width='100' height='100' viewBox='0 0 100 100' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M11 18c3.866 0 7-3.134 7-7s-3.134-7-7-7-7 3.134-7 7 3.134 7 7 7zm48 25c3.866 0 7-3.134 7-7s-3.134-7-7-7-7 3.134-7 7 3.134 7 7 7zm-43-7c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm63 31c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zM34 90c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm56-76c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zM12 86c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm28-65c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm23-11c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm-6 60c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm29 22c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zM32 63c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm57-13c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm-9-21c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM60 91c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM35 41c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM12 60c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2z' fill='%23e0e0e0' fill-opacity='0.3' fill-rule='evenodd'/%3E%3C/svg%3E");
  }
  
  .auth-container {
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 100vh;
    padding: var(--spacing-lg);
  }
  
  .auth-form {
    background: white;
    padding: var(--spacing-2xl);
    border-radius: var(--radius-lg);
    box-shadow: var(--shadow-md);
    width: 100%;
    max-width: 420px;
  }
  
  .auth-header {
    text-align: center;
    margin-bottom: var(--spacing-2xl);
  }
  
  .auth-title {
    font-size: 2rem;
    font-weight: 700;
    color: var(--color-primary);
    margin-bottom: var(--spacing-xs);
  }
  
  .auth-subtitle {
    color: var(--color-text-light);
    margin-bottom: 0;
  }
  
  .auth-form h2 {
    font-size: 1.25rem;
    margin-bottom: var(--spacing-xl);
    text-align: center;
  }
  
  .alert {
    margin-bottom: var(--spacing-md);
  }
  
  .alert-info {
    background-color: rgba(51, 153, 255, 0.1);
    color: #3399ff;
  }
  
  .form-group {
    margin-bottom: var(--spacing-lg);
  }
  
  #message-container {
    min-height: 60px;
    margin-bottom: var(--spacing-md);
  }
  .forgot-password {
  text-align: right;
  margin-top: -0.5rem;
  margin-bottom: 1rem;
}

.forgot-password-link {
  font-size: 0.875rem;
  color: var(--color-text-light);
  text-decoration: none;
}

.forgot-password-link:hover {
  color: var(--color-primary);
  text-decoration: underline;
}
</style>
</document_content>
</invoke>