---
// src/pages/challenges/[id].astro
import Layout from '../../layouts/Layout.astro';
import Leaderboard from '../../components/Leaderboard';
import { supabase } from '../../lib/supabase';

// Get challenge ID from URL
const { id } = Astro.params;

// Check if user is authenticated
const { cookies, redirect } = Astro;

const accessToken = cookies.get('sb-access-token');
const refreshToken = cookies.get('sb-refresh-token');

let user = null;
let isParticipant = false;

if (accessToken && refreshToken) {
  const { data } = await supabase.auth.setSession({
    access_token: accessToken.value,
    refresh_token: refreshToken.value
  });
  
  user = data.user;
  
  // Check if user is a participant
  if (user && id) {
    const { data: participant } = await supabase
      .from('challenge_participants')
      .select('*')
      .eq('challenge_id', id)
      .eq('user_id', user.id)
      .maybeSingle();
      
    isParticipant = !!participant;
  }
} else {
  return redirect('/auth');
}

// Get challenge details
const { data: challenge } = await supabase
  .from('challenges')
  .select(`
    *,
    creator:created_by (username),
    participants:challenge_participants (
      user_id
    )
  `)
  .eq('id', id)
  .single();

// Handle 404 if challenge not found
if (!challenge) {
  return Astro.redirect('/challenges');
}

// Format dates for display
const startDate = new Date(challenge.start_date).toLocaleDateString();
const endDate = new Date(challenge.end_date).toLocaleDateString();

// Calculate challenge stats
const participantCount = challenge.participants?.length || 0;

// Calculate progress for goal types
const today = new Date();
const challengeStart = new Date(challenge.start_date);
const challengeEnd = new Date(challenge.end_date);
const totalDays = Math.ceil((challengeEnd - challengeStart) / (1000 * 60 * 60 * 24));
const daysPassed = Math.max(0, Math.ceil((today - challengeStart) / (1000 * 60 * 60 * 24)));
const daysRemaining = Math.max(0, Math.ceil((challengeEnd - today) / (1000 * 60 * 60 * 24)));
const progressPercentage = Math.min(100, Math.round((daysPassed / totalDays) * 100));

// Get total exercises completed for this challenge
const { data: exerciseData } = await supabase
  .from('exercise_logs')
  .select('exercise_count')
  .eq('challenge_id', id);
  
const totalExercises = exerciseData?.reduce((sum, log) => sum + log.exercise_count, 0) || 0;
---

<Layout title={challenge.title + ' - Pushups App'}>
  <header>
    <div class="container">
      <h1>Pushups Challenge</h1>
      <nav>
        <ul>
          <li><a href="/">Home</a></li>
          <li><a href="/challenges">Challenges</a></li>
          <li><a href="/profile">Profile</a></li>
          <li>
            <button id="logout">Logout</button>
          </li>
        </ul>
      </nav>
    </div>
  </header>

  <main>
    <div class="container">
      <div class="challenge-header">
        <div class="challenge-title">
          <a href="/challenges" class="back-link">&larr; Back to Challenges</a>
          <h2>{challenge.title}</h2>
        </div>
        
        {!isParticipant && (
          <div class="join-action">
            <button id="joinChallenge" data-id={challenge.id}>Join Challenge</button>
          </div>
        )}
      </div>
      
      <div class="challenge-grid">
        <div class="challenge-details-card">
          <div class="challenge-description">
            <p>{challenge.description || 'No description provided.'}</p>
          </div>
          
          <div class="challenge-meta">
            <div class="meta-item">
              <span class="meta-label">Exercise Type:</span>
              <span class="meta-value">{challenge.exercise_type}</span>
            </div>
            
            <div class="meta-item">
              <span class="meta-label">Goal:</span>
              <span class="meta-value">
                {challenge.goal_value} {challenge.goal_type.replace('_', ' ')}
              </span>
            </div>
            
            <div class="meta-item">
              <span class="meta-label">Duration:</span>
              <span class="meta-value">{startDate} to {endDate}</span>
            </div>
            
            <div class="meta-item">
              <span class="meta-label">Created by:</span>
              <span class="meta-value">{challenge.creator?.username || 'Administrator'}</span>
            </div>
            
            <div class="meta-item">
              <span class="meta-label">Participants:</span>
              <span class="meta-value">{participantCount}</span>
            </div>
          </div>
          
          <div class="challenge-progress">
            <h3>Challenge Progress</h3>
            
            <div class="progress-stats">
              <div class="stat-block">
                <div class="stat-value">{daysPassed}</div>
                <div class="stat-label">Days Completed</div>
              </div>
              
              <div class="stat-block">
                <div class="stat-value">{daysRemaining}</div>
                <div class="stat-label">Days Remaining</div>
              </div>
              
              <div class="stat-block">
                <div class="stat-value">{totalExercises.toLocaleString()}</div>
                <div class="stat-label">Total {challenge.exercise_type}</div>
              </div>
            </div>
            
            <div class="progress-bar">
              <div 
                class="progress-fill" 
                style={`width: ${progressPercentage}%`}
              ></div>
              <span class="progress-text">{progressPercentage}% Complete</span>
            </div>
          </div>
        </div>
        
        <div class="challenge-leaderboard">
          <Leaderboard client:load challengeId={challenge.id} />
        </div>
      </div>
    </div>
  </main>
</Layout>

<script define:vars={{ challengeId: challenge.id }}>
  import { supabase } from '../../lib/supabase';
  
  document.getElementById('logout')?.addEventListener('click', async () => {
    await supabase.auth.signOut();
    window.location.href = '/auth';
  });
  
  document.getElementById('joinChallenge')?.addEventListener('click', async () => {
    try {
      // Get current user
      const { data: { user } } = await supabase.auth.getUser();
      
      if (!user) {
        window.location.href = '/auth';
        return;
      }
      
      // Join the challenge
      const { error } = await supabase
        .from('challenge_participants')
        .insert([
          { challenge_id: challengeId, user_id: user.id }
        ]);
        
      if (error) throw error;
      
      // Reload page to refresh UI
      window.location.reload();
    } catch (err) {
      console.error('Error joining challenge:', err);
      alert('Error joining challenge: ' + err.message);
    }
  });
</script>

<style>
  header {
    background-color: #4f46e5;
    color: white;
    padding: 1rem 0;
  }
  
  .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 1rem;
  }
  
  header .container {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }
  
  nav ul {
    display: flex;
    gap: 1.5rem;
    list-style: none;
    margin: 0;
    padding: 0;
  }
  
  nav a {
    color: white;
    text-decoration: none;
  }
  
  nav a:hover {
    text-decoration: underline;
  }
  
  #logout {
    background: none;
    border: 1px solid white;
    color: white;
    padding: 0.25rem 0.75rem;
    cursor: pointer;
    font-size: 0.875rem;
    border-radius: 4px;
    width: auto;
    margin-top: 0;
  }
  
  #logout:hover {
    background-color: rgba(255, 255, 255, 0.1);
  }
  
  main {
    padding: 2rem 0;
  }
  
  .challenge-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: 2rem;
  }
  
  .back-link {
    display: inline-block;
    color: #6b7280;
    text-decoration: none;
    margin-bottom: 0.5rem;
    font-size: 0.875rem;
  }
  
  .back-link:hover {
    color: #4f46e5;
  }
  
  h2 {
    margin-top: 0;
    margin-bottom: 0;
  }
  
  #joinChallenge {
    background-color: #4f46e5;
    color: white;
    border: none;
    padding: 0.75rem 1.5rem;
    border-radius: 4px;
    font-size: 1rem;
    cursor: pointer;
  }
  
  #joinChallenge:hover {
    background-color: #4338ca;
  }
  
  .challenge-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 2rem;
  }
  
  @media (max-width: 768px) {
    .challenge-grid {
      grid-template-columns: 1fr;
    }
    
    .challenge-header {
      flex-direction: column;
      gap: 1rem;
    }
    
    .join-action {
      width: 100%;
    }
    
    #joinChallenge {
      width: 100%;
    }
  }
  
  .challenge-details-card {
    background-color: white;
    border-radius: 8px;
    padding: 1.5rem;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }
  
  .challenge-description {
    margin-bottom: 1.5rem;
  }
  
  .challenge-meta {
    margin-bottom: 2rem;
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 1rem;
  }
  
  .meta-item {
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
  }
  
  .meta-label {
    font-size: 0.75rem;
    color: #6b7280;
  }
  
  .meta-value {
    font-weight: 500;
  }
  
  .challenge-progress h3 {
    margin-top: 0;
    margin-bottom: 1rem;
    color: #4f46e5;
  }
  
  .progress-stats {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 1rem;
    margin-bottom: 1.5rem;
  }
  
  .stat-block {
    background-color: #f3f4f6;
    padding: 1rem;
    border-radius: 8px;
    text-align: center;
  }
  
  .stat-value {
    font-size: 1.5rem;
    font-weight: bold;
    color: #4f46e5;
  }
  
  .stat-label {
    font-size: 0.75rem;
    color: #6b7280;
    margin-top: 0.25rem;
  }
  
  .progress-bar {
    background-color: #f3f4f6;
    border-radius: 9999px;
    height: 1.5rem;
    position: relative;
    overflow: hidden;
  }
  
  .progress-fill {
    background-color: #4f46e5;
    height: 100%;
    border-radius: 9999px;
    transition: width 0.3s ease;
  }
  
  .progress-text {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    display: flex;
    align-items: center;
    justify-content: center;
    color: #1f2937;
    font-size: 0.75rem;
    font-weight: 500;
  }
  
  .challenge-leaderboard {
    padding: 1.5rem;
    background-color: white;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }
</style>