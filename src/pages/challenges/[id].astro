---
// src/pages/challenges/[id].astro
import Layout from '../../layouts/Layout.astro';
import Header from '../../components/Header.astro';
import Leaderboard from '../../components/Leaderboard';
import ExerciseTracker from '../../components/ExerciseTracker';
import { supabase } from '../../lib/supabase';

// Get challenge ID from URL
const { id } = Astro.params;

// Check if user is authenticated
const { cookies, redirect } = Astro;

const accessToken = cookies.get('sb-access-token');
const refreshToken = cookies.get('sb-refresh-token');

let user = null;
let isParticipant = false;

if (accessToken && refreshToken) {
  const { data } = await supabase.auth.setSession({
    access_token: accessToken.value,
    refresh_token: refreshToken.value
  });
  
  user = data.user;
  
  // Check if user is a participant
  if (user && id) {
    const { data: participant } = await supabase
      .from('challenge_participants')
      .select('*')
      .eq('challenge_id', id)
      .eq('user_id', user.id)
      .maybeSingle();
      
    isParticipant = !!participant;
  }
} else {
  return redirect('/auth');
}

// Get challenge details
const { data: challenge } = await supabase
  .from('challenges')
  .select(`
    *,
    creator:created_by (username, avatar_url),
    participants:challenge_participants (
      user_id
    )
  `)
  .eq('id', id)
  .single();

// Handle 404 if challenge not found
if (!challenge) {
  return Astro.redirect('/challenges');
}

// Format dates for display
const startDate = new Date(challenge.start_date).toLocaleDateString();
const endDate = new Date(challenge.end_date).toLocaleDateString();

// Calculate challenge stats
const participantCount = challenge.participants?.length || 0;

// Calculate progress for goal types
const today = new Date();
const challengeStart = new Date(challenge.start_date);
const challengeEnd = new Date(challenge.end_date);
const totalDays = Math.ceil((challengeEnd - challengeStart) / (1000 * 60 * 60 * 24));
const daysPassed = Math.max(0, Math.ceil((today - challengeStart) / (1000 * 60 * 60 * 24)));
const daysRemaining = Math.max(0, Math.ceil((challengeEnd - today) / (1000 * 60 * 60 * 24)));
const progressPercentage = Math.min(100, Math.round((daysPassed / totalDays) * 100));

// Get total exercises completed for this challenge
const { data: exerciseData } = await supabase
  .from('exercise_logs')
  .select('exercise_count')
  .eq('challenge_id', id);
  
const totalExercises = exerciseData?.reduce((sum, log) => sum + log.exercise_count, 0) || 0;

// Determine challenge status
const getChallengeStatus = () => {
  const today = new Date().toISOString().split('T')[0];
  
  if (challenge.start_date > today) {
    return 'upcoming';
  } else if (challenge.end_date < today) {
    return 'completed';
  } else {
    return 'active';
  }
};

const status = getChallengeStatus();
---

<Layout title={`${challenge.title} - FitChallenge`}>
  <Header activePage="challenges" />

  <main>
    <div class="container">
      <nav class="breadcrumbs">
        <a href="/challenges">Challenges</a>
        <span class="separator">/</span>
        <span class="current">{challenge.title}</span>
      </nav>
      
      <div class="challenge-header">
        <div>
          <div class={`challenge-status ${status}`}>{status}</div>
          <h1>{challenge.title}</h1>
        </div>
        
        {!isParticipant && status !== 'completed' && (
          <button id="joinChallenge" class="btn btn-primary" data-id={challenge.id}>
            Join Challenge
          </button>
        )}
      </div>
      
      <div class="challenge-layout">
        <div class="main-content">
          <section class="challenge-details card">
            <div class="description">
              <h2>About this Challenge</h2>
              <p>{challenge.description || 'No description provided for this challenge.'}</p>
            </div>
            
            <div class="challenge-info-grid">
              <div class="info-card">
                <div class="info-icon">
                  <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path d="M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z"></path>
                    <polyline points="14 2 14 8 20 8"></polyline>
                  </svg>
                </div>
                <div class="info-content">
                  <div class="info-label">Type</div>
                  <div class="info-value">{challenge.exercise_type}</div>
                </div>
              </div>
              
              <div class="info-card">
                <div class="info-icon">
                  <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path d="M18 8h1a4 4 0 0 1 0 8h-1"></path>
                    <path d="M2 8h16v9a4 4 0 0 1-4 4H6a4 4 0 0 1-4-4V8z"></path>
                    <line x1="6" y1="1" x2="6" y2="4"></line>
                    <line x1="10" y1="1" x2="10" y2="4"></line>
                    <line x1="14" y1="1" x2="14" y2="4"></line>
                  </svg>
                </div>
                <div class="info-content">
                  <div class="info-label">Goal</div>
                  <div class="info-value">{challenge.goal_value} {challenge.goal_type.replace('_', ' ')}</div>
                </div>
              </div>
              
              <div class="info-card">
                <div class="info-icon">
                  <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
                    <line x1="16" y1="2" x2="16" y2="6"></line>
                    <line x1="8" y1="2" x2="8" y2="6"></line>
                    <line x1="3" y1="10" x2="21" y2="10"></line>
                  </svg>
                </div>
                <div class="info-content">
                  <div class="info-label">Duration</div>
                  <div class="info-value">{startDate} to {endDate}</div>
                </div>
              </div>
              
              <div class="info-card">
                <div class="info-icon">
                  <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path>
                    <circle cx="12" cy="7" r="4"></circle>
                  </svg>
                </div>
                <div class="info-content">
                  <div class="info-label">Created by</div>
                  <div class="info-value">{challenge.creator?.username || 'Administrator'}</div>
                </div>
              </div>
            </div>
          </section>
          
          {isParticipant && status === 'active' && (
            <section class="challenge-tracking card">
              <h2>Track Your Progress</h2>
              <ExerciseTracker client:load challengeId={challenge.id} />
            </section>
          )}
          
          <section class="challenge-progress card">
            <h2>Challenge Progress</h2>
            
            <div class="progress-stats">
              <div class="stat-block">
                <div class="stat-value">{daysPassed}</div>
                <div class="stat-label">Days Completed</div>
              </div>
              
              <div class="stat-block">
                <div class="stat-value">{daysRemaining}</div>
                <div class="stat-label">Days Remaining</div>
              </div>
              
              <div class="stat-block">
                <div class="stat-value">{totalExercises.toLocaleString()}</div>
                <div class="stat-label">Total {challenge.exercise_type}</div>
              </div>
              
              <div class="stat-block">
                <div class="stat-value">{participantCount}</div>
                <div class="stat-label">Participants</div>
              </div>
            </div>
            
            <div class="progress-section">
              <div class="progress-text">
                <span>{progressPercentage}% Complete</span>
                <span>{daysPassed} of {totalDays} days</span>
              </div>
              <div class="progress-bar">
                <div 
                  class="progress-fill" 
                  style={`width: ${progressPercentage}%`}
                ></div>
              </div>
            </div>
          </section>
        </div>
        
        <div class="sidebar">
          <section class="challenge-leaderboard card">
            <h2>Leaderboard</h2>
            <Leaderboard client:load challengeId={challenge.id} />
          </section>
        </div>
      </div>
    </div>
  </main>
</Layout>

<script define:vars={{ challengeId: challenge.id }}>
  import { supabase } from '../../lib/supabase';
  
  document.getElementById('joinChallenge')?.addEventListener('click', async (event) => {
    const button = event.target;
    button.disabled = true;
    button.textContent = 'Joining...';
    
    try {
      // Get current user
      const { data: { user } } = await supabase.auth.getUser();
      
      if (!user) {
        window.location.href = '/auth';
        return;
      }
      
      // Join the challenge
      const { error } = await supabase
        .from('challenge_participants')
        .insert([
          { challenge_id: challengeId, user_id: user.id }
        ]);
        
      if (error) throw error;
      
      // Reload page to refresh UI
      window.location.reload();
    } catch (err) {
      console.error('Error joining challenge:', err);
      alert('Error joining challenge: ' + err.message);
      button.disabled = false;
      button.textContent = 'Join Challenge';
    }
  });
</script>

<style>
  main {
    padding: var(--spacing-xl) 0;
  }
  
  .breadcrumbs {
    display: flex;
    align-items: center;
    gap: var(--spacing-xs);
    margin-bottom: var(--spacing-md);
    font-size: 0.875rem;
  }
  
  .breadcrumbs a {
    color: var(--color-text-light);
    text-decoration: none;
  }
  
  .breadcrumbs a:hover {
    color: var(--color-primary);
    text-decoration: underline;
  }
  
  .separator {
    color: var(--color-text-light);
  }
  
  .current {
    font-weight: 500;
    color: var(--color-text);
  }
  
  .challenge-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: var(--spacing-xl);
  }
  
  .challenge-header h1 {
    margin: var(--spacing-xs) 0 0 0;
  }
  
  .challenge-status {
    display: inline-block;
    padding: 0.25rem 0.75rem;
    border-radius: var(--radius-sm);
    font-size: 0.75rem;
    font-weight: 500;
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }
  
  .challenge-status.active {
    background-color: rgba(255, 90, 95, 0.1);
    color: var(--color-primary);
  }
  
  .challenge-status.upcoming {
    background-color: rgba(0, 166, 153, 0.1);
    color: var(--color-secondary);
  }
  
  .challenge-status.completed {
    background-color: rgba(118, 118, 118, 0.1);
    color: var(--color-text-light);
  }
  
  .challenge-layout {
    display: grid;
    grid-template-columns: 2fr 1fr;
    gap: var(--spacing-xl);
  }
  
  .card {
    background-color: var(--color-white);
    border-radius: var(--radius-md);
    padding: var(--spacing-lg);
    box-shadow: var(--shadow-sm);
    margin-bottom: var(--spacing-xl);
  }
  
  .card h2 {
    margin-top: 0;
    margin-bottom: var(--spacing-md);
    font-size: 1.25rem;
  }
  
  .description {
    margin-bottom: var(--spacing-lg);
  }
  
  .description p {
    margin: 0;
    color: var(--color-text);
    line-height: 1.6;
  }
  
  .challenge-info-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    gap: var(--spacing-md);
  }
  
  .info-card {
    display: flex;
    align-items: center;
    padding: var(--spacing-md);
    background-color: var(--color-background);
    border-radius: var(--radius-md);
  }
  
  .info-icon {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 40px;
    height: 40px;
    border-radius: 50%;
    background-color: rgba(255, 90, 95, 0.1);
    color: var(--color-primary);
    margin-right: var(--spacing-md);
    flex-shrink: 0;
  }
  
  .info-content {
    flex: 1;
  }
  
  .info-label {
    font-size: 0.75rem;
    color: var(--color-text-light);
    margin-bottom: var(--spacing-xs);
  }
  
  .info-value {
    font-weight: 500;
  }
  
  .progress-stats {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
    gap: var(--spacing-md);
    margin-bottom: var(--spacing-lg);
  }
  
  .stat-block {
    text-align: center;
    padding: var(--spacing-md);
    background-color: var(--color-background);
    border-radius: var(--radius-md);
  }
  
  .stat-value {
    font-size: 1.5rem;
    font-weight: 700;
    color: var(--color-primary);
    line-height: 1.2;
    margin-bottom: var(--spacing-xs);
  }
  
  .stat-label {
    font-size: 0.75rem;
    color: var(--color-text-light);
  }
  
  .progress-section {
    margin-top: var(--spacing-lg);
  }
  
  .progress-text {
    display: flex;
    justify-content: space-between;
    font-size: 0.875rem;
    margin-bottom: var(--spacing-sm);
  }
  
  .progress-bar {
    height: 8px;
    background-color: var(--color-background);
    border-radius: 9999px;
    overflow: hidden;
  }
  
  .progress-fill {
    height: 100%;
    background-color: var(--color-primary);
    border-radius: 9999px;
    transition: width 0.3s ease;
  }
  
  @media (max-width: 960px) {
    .challenge-layout {
      grid-template-columns: 1fr;
    }
    
    .challenge-header {
      flex-direction: column;
      gap: var(--spacing-md);
    }
    
    #joinChallenge {
      width: 100%;
    }
  }
</style>