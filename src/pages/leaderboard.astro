---
// src/pages/leaderboard.astro
import Layout from '../layouts/Layout.astro';
import Header from '../components/Header.astro';
import Leaderboard from '../components/Leaderboard';
import { supabase } from '../lib/supabase';

// Check if user is authenticated
const { cookies, redirect } = Astro;

const accessToken = cookies.get('sb-access-token');
const refreshToken = cookies.get('sb-refresh-token');

let user = null;
let challenges = [];

if (accessToken && refreshToken) {
  const { data } = await supabase.auth.setSession({
    access_token: accessToken.value,
    refresh_token: refreshToken.value
  });
  
  user = data.user;
  
  // Get active challenges for the filter
  if (user) {
    const today = new Date().toISOString().split('T')[0];
    
    const { data: challengesData } = await supabase
      .from('challenges')
      .select('id, title')
      .lte('start_date', today)  // Challenge has started
      .gte('end_date', today)    // Challenge has not ended
      .order('title');
      
    challenges = challengesData || [];
  }
} else {
  return redirect('/auth');
}
---

<Layout title="Leaderboard - FitChallenge">
  <Header activePage="leaderboard" />

  <main>
    <div class="container">
      <section class="page-header">
        <div>
          <h1>Leaderboard</h1>
          <p class="subtitle">See how you stack up against other participants</p>
        </div>
        
        <div class="challenge-filter">
          <label for="challenge-select">Filter by challenge:</label>
          <select id="challenge-select" class="form-control">
            <option value="">All Challenges</option>
            {challenges.map(challenge => (
              <option value={challenge.id}>{challenge.title}</option>
            ))}
          </select>
        </div>
      </section>
      
      <section class="leaderboard-section">
        <div id="leaderboard-container">
          <Leaderboard client:load />
        </div>
      </section>
    </div>
  </main>
</Layout>

<script>
  // Challenge filter functionality
  const challengeSelect = document.getElementById('challenge-select');
  const leaderboardContainer = document.getElementById('leaderboard-container');
  
  let currentComponent = null;
  
  challengeSelect?.addEventListener('change', async () => {
    const selectedChallengeId = challengeSelect.value;
    
    // Remove old component
    if (leaderboardContainer) {
      leaderboardContainer.innerHTML = '<div class="loading-placeholder"><div class="loader"></div><p>Loading leaderboard...</p></div>';
    }
    
    // Create new component with selected challenge ID
    if (typeof window.Astro !== 'undefined') {
      try {
        // If Astro is available, use its API to render the component
        if (currentComponent) {
          currentComponent.unmount();
        }
        
        const props = selectedChallengeId ? { challengeId: selectedChallengeId } : {};
        
        if (leaderboardContainer) {
          leaderboardContainer.innerHTML = '';
          
          // Dynamically import the Leaderboard component
          const { default: LeaderboardComponent } = await import('../components/Leaderboard');
          
          // Render it to the container
          const root = document.createElement('div');
          leaderboardContainer.appendChild(root);
          
          // Create a new React component instance
          if (window.React && window.ReactDOM) {
            currentComponent = window.ReactDOM.render(
              window.React.createElement(LeaderboardComponent, props),
              root
            );
          }
        }
      } catch (error) {
        console.error('Error rendering component:', error);
        fallbackRender();
      }
    } else {
      fallbackRender();
    }
    
    // Fallback to full page reload
    function fallbackRender() {
      // Create new component with selected challenge ID
      if (leaderboardContainer) {
        const astroIsland = document.createElement('astro-island');
        astroIsland.setAttribute('client', 'load');
        
        if (selectedChallengeId) {
          astroIsland.setAttribute('component-url', '/src/components/Leaderboard');
          astroIsland.setAttribute('component-export', 'default');
          astroIsland.setAttribute('renderer-url', '/node_modules/@astrojs/react/client.js');
          astroIsland.setAttribute('props', JSON.stringify({
            challengeId: selectedChallengeId
          }));
        } else {
          astroIsland.setAttribute('component-url', '/src/components/Leaderboard');
          astroIsland.setAttribute('component-export', 'default');
          astroIsland.setAttribute('renderer-url', '/node_modules/@astrojs/react/client.js');
          astroIsland.setAttribute('props', '{}');
        }
        
        // Replace the placeholder
        leaderboardContainer.innerHTML = '';
        leaderboardContainer.appendChild(astroIsland);
      }
    }
  });
</script>

<style>
  main {
    padding: var(--spacing-xl) 0;
  }
  
  .page-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: var(--spacing-xl);
    flex-wrap: wrap;
    gap: var(--spacing-md);
  }
  
  .page-header h1 {
    margin-bottom: var(--spacing-xs);
  }
  
  .subtitle {
    color: var(--color-text-light);
    margin-bottom: 0;
  }
  
  .challenge-filter {
    min-width: 250px;
  }
  
  .challenge-filter label {
    display: block;
    font-size: 0.875rem;
    margin-bottom: var(--spacing-xs);
    color: var(--color-text-light);
  }
  
  .leaderboard-section {
    margin-bottom: var(--spacing-2xl);
  }
  
  .loading-placeholder {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    min-height: 200px;
    background-color: var(--color-white);
    border-radius: var(--radius-md);
    box-shadow: var(--shadow-sm);
    padding: var(--spacing-xl);
    color: var(--color-text-light);
  }
  
  .loader {
    border: 3px solid var(--color-border);
    border-radius: 50%;
    border-top: 3px solid var(--color-primary);
    width: 24px;
    height: 24px;
    animation: spin 1s linear infinite;
    margin-bottom: var(--spacing-md);
  }
  
  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }
  
  @media (max-width: 768px) {
    .page-header {
      flex-direction: column;
      align-items: stretch;
    }
    
    .challenge-filter {
      width: 100%;
    }
  }
</style>