---
// src/pages/leaderboard.astro
import Layout from '../layouts/Layout.astro';
import Header from '../components/Header.astro';
// Renamed import to avoid conflict
import LeaderboardComponent from '../components/Leaderboard';
import EnhancedLeaderboard from '../components/EnhancedLeaderboard';
import { supabase } from '../lib/supabase';

// Check if user is authenticated
const { cookies, redirect } = Astro;

const accessToken = cookies.get('sb-access-token');
const refreshToken = cookies.get('sb-refresh-token');

let user = null;
// Add type annotation
let challenges: { id: string; title: string }[] = [];

if (accessToken && refreshToken) {
  const { data } = await supabase.auth.setSession({
    access_token: accessToken.value,
    refresh_token: refreshToken.value
  });
  
  user = data.user;
  
  // Get active challenges for the filter
  if (user) {
    const today = new Date().toISOString().split('T')[0];
    
    const { data: challengesData } = await supabase
      .from('challenges')
      .select('id, title')
      .lte('start_date', today)  // Challenge has started
      .gte('end_date', today)    // Challenge has not ended
      .order('title');
      
    challenges = challengesData || [];
    console.log('challenges', challenges);
  }
} else {
  return redirect('/auth');
}
---

<Layout title="Leaderboard - FitChallenge">
  <Header activePage="leaderboard" />

  <main>
    <div class="container">
      <section class="page-header">
        <div>
          <h1>Leaderboard</h1>
          <p class="subtitle">See how you stack up against other participants</p>
        </div>
        
        <div class="challenge-filter">
          <label for="challenge-select">Filter by challenge:</label>
          <select id="challenge-select" class="form-control">
            <option value="">All Challenges</option>
            {challenges.map(challenge => (
              <option value={challenge.id}>{challenge.title}</option>
            ))}
          </select>
        </div>
      </section>
      
      <section class="leaderboard-section">
        <div id="leaderboard-container">
          <EnhancedLeaderboard client:load challengeId={Astro.url.searchParams.get('challenge') || ""} />
        </div>
      </section>
    </div>
  </main>
</Layout>

<script>
  // Challenge filter functionality
  const challengeSelect = document.getElementById('challenge-select') as HTMLSelectElement;
  
  if (challengeSelect) {
    // Set initial value from URL if present
    const urlParams = new URLSearchParams(window.location.search);
    const challengeParam = urlParams.get('challenge');
    
    if (challengeParam) {
      // Find if this option exists in the dropdown
      const optionExists = Array.from(challengeSelect.options).some(
        opt => (opt as HTMLOptionElement).value === challengeParam
      );
      
      if (optionExists) {
        challengeSelect.value = challengeParam;
      }
    }
    
    // Add change event handler
    challengeSelect.addEventListener('change', () => {
      const selectedChallengeId = challengeSelect.value;
      
      // Update URL and reload page
      if (selectedChallengeId) {
        window.location.href = `/leaderboard?challenge=${selectedChallengeId}`;
      } else {
        window.location.href = '/leaderboard';
      }
    });
  }
</script>

<style>
  main {
    padding: var(--spacing-xl) 0;
  }
  
  .page-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: var(--spacing-xl);
    flex-wrap: wrap;
    gap: var(--spacing-md);
  }
  
  .page-header h1 {
    margin-bottom: var(--spacing-xs);
  }
  
  .subtitle {
    color: var(--color-text-light);
    margin-bottom: 0;
  }
  
  .challenge-filter {
    min-width: 250px;
  }
  
  .challenge-filter label {
    display: block;
    font-size: 0.875rem;
    margin-bottom: var(--spacing-xs);
    color: var(--color-text-light);
  }
  
  .leaderboard-section {
    margin-bottom: var(--spacing-2xl);
  }
  
  .loading-placeholder {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    min-height: 200px;
    background-color: var(--color-white);
    border-radius: var(--radius-md);
    box-shadow: var(--shadow-sm);
    padding: var(--spacing-xl);
    color: var(--color-text-light);
  }
  
  .loader {
    border: 3px solid var(--color-border);
    border-radius: 50%;
    border-top: 3px solid var(--color-primary);
    width: 24px;
    height: 24px;
    animation: spin 1s linear infinite;
    margin-bottom: var(--spacing-md);
  }
  
  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }
  
  @media (max-width: 768px) {
    .page-header {
      flex-direction: column;
      align-items: stretch;
    }
    
    .challenge-filter {
      width: 100%;
    }
  }
</style>