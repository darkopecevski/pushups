---
// src/pages/profile.astro
import Layout from '../layouts/Layout.astro';
import Header from '../components/Header.astro';
import { supabase } from '../lib/supabase';

// Check if user is authenticated
const { cookies, redirect } = Astro;

const accessToken = cookies.get('sb-access-token');
const refreshToken = cookies.get('sb-refresh-token');

let user = null;
let profile = null;
let userChallenges = [];
let activityStats = null;

if (accessToken && refreshToken) {
  const { data } = await supabase.auth.setSession({
    access_token: accessToken.value,
    refresh_token: refreshToken.value
  });
  
  user = data.user;
  
  // Get user profile
  if (user) {
    const { data: profileData } = await supabase
      .from('profiles')
      .select('*')
      .eq('id', user.id)
      .single();
      
    profile = profileData;
    
    // Get challenges the user has joined
    const { data: challengesData } = await supabase
      .from('challenge_participants')
      .select(`
        challenges:challenge_id (
          id, title, exercise_type, goal_type, goal_value, start_date, end_date
        )
      `)
      .eq('user_id', user.id);
      
    userChallenges = challengesData?.map(item => item.challenges) || [];
    
    // Get user activity stats
    const { data: logsData } = await supabase
      .from('exercise_logs')
      .select('*')
      .eq('user_id', user.id)
      .order('log_date', { ascending: false });
      
    if (logsData) {
      // Calculate total exercises
      const totalExercises = logsData.reduce((sum, log) => sum + log.exercise_count, 0);
      
      // Calculate total days active
      const activeDays = new Set(logsData.map(log => log.log_date)).size;
      
      // Get most recent activity
      const mostRecentActivity = logsData.length > 0 ? logsData[0].log_date : null;
      
      // Get best streak using the database function
      let bestStreak = 0;
      if (userChallenges.length > 0) {
        for (const challenge of userChallenges) {
          const { data: streakData } = await supabase.rpc(
            'get_current_streak',
            { p_user_id: user.id, p_challenge_id: challenge.id }
          );
          bestStreak = Math.max(bestStreak, streakData || 0);
        }
      }
      
      activityStats = {
        totalExercises,
        activeDays,
        mostRecentActivity,
        bestStreak
      };
    }
  }
} else {
  return redirect('/auth');
}

// Format date helper
const formatDate = (dateString) => {
  if (!dateString) return 'Never';
  return new Date(dateString).toLocaleDateString();
};

// Determine challenge status
const getChallengeStatus = (challenge) => {
  const today = new Date().toISOString().split('T')[0];
  
  if (challenge.start_date > today) {
    return 'upcoming';
  } else if (challenge.end_date < today) {
    return 'completed';
  } else {
    return 'active';
  }
};
---

<Layout title="Profile - FitChallenge">
  <Header activePage="profile" />

  <main>
    <div class="container">
      <section class="profile-header">
        <div class="profile-avatar">
          {profile?.avatar_url ? (
            <img src={profile.avatar_url} alt="Profile" />
          ) : (
            <div class="avatar-placeholder">
              {profile?.username?.charAt(0).toUpperCase() || 'U'}
            </div>
          )}
        </div>
        
        <div class="profile-info">
          <h1>{profile?.full_name || 'User'}</h1>
          <p class="username">@{profile?.username || 'user'}</p>
          {profile?.is_admin && <span class="admin-badge">Admin</span>}
        </div>
      </section>
      
      <div class="profile-layout">
        <div class="profile-main">
          <section class="profile-section">
            <h2>Activity Stats</h2>
            
            {activityStats ? (
              <div class="stats-grid">
                <div class="stat-card">
                  <div class="stat-icon">
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                      <polyline points="22 12 18 12 15 21 9 3 6 12 2 12"></polyline>
                    </svg>
                  </div>
                  <div class="stat-content">
                    <div class="stat-value">{activityStats.totalExercises}</div>
                    <div class="stat-label">Total Exercises</div>
                  </div>
                </div>
                
                <div class="stat-card">
                  <div class="stat-icon">
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                      <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
                      <line x1="16" y1="2" x2="16" y2="6"></line>
                      <line x1="8" y1="2" x2="8" y2="6"></line>
                      <line x1="3" y1="10" x2="21" y2="10"></line>
                    </svg>
                  </div>
                  <div class="stat-content">
                    <div class="stat-value">{activityStats.activeDays}</div>
                    <div class="stat-label">Days Active</div>
                  </div>
                </div>
                
                <div class="stat-card">
                  <div class="stat-icon">
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                      <path d="M17 3a2.83 2.83 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5L17 3z"></path>
                    </svg>
                  </div>
                  <div class="stat-content">
                    <div class="stat-value">{activityStats.bestStreak}</div>
                    <div class="stat-label">Best Streak</div>
                  </div>
                </div>
                
                <div class="stat-card">
                  <div class="stat-icon">
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                      <circle cx="12" cy="12" r="10"></circle>
                      <polyline points="12 6 12 12 16 14"></polyline>
                    </svg>
                  </div>
                  <div class="stat-content">
                    <div class="stat-value">
                      {formatDate(activityStats.mostRecentActivity)}
                    </div>
                    <div class="stat-label">Last Activity</div>
                  </div>
                </div>
              </div>
            ) : (
              <div class="empty-state">
                <p>No activity recorded yet. Start logging exercises to see your stats!</p>
                <a href="/" class="btn btn-primary">Go to Dashboard</a>
              </div>
            )}
          </section>
          
          <section class="profile-section">
            <div class="section-header">
              <h2>Your Challenges</h2>
              <a href="/challenges" class="btn btn-outline btn-sm">Find More</a>
            </div>
            
            {userChallenges.length > 0 ? (
              <div class="challenges-grid">
                {userChallenges.map(challenge => {
                  const status = getChallengeStatus(challenge);
                  return (
                    <div class={`challenge-card ${status}`}>
                      <div class="challenge-status">{status}</div>
                      <h3>{challenge.title}</h3>
                      <div class="challenge-dates">
                        {formatDate(challenge.start_date)} - {formatDate(challenge.end_date)}
                      </div>
                      <div class="challenge-goal">
                        Goal: {challenge.goal_value} {challenge.exercise_type} 
                        ({challenge.goal_type.replace('_', ' ')})
                      </div>
                      
                      {status === 'active' && (
                        <a href={`/challenges/${challenge.id}`} class="btn btn-primary btn-sm">View Challenge</a>
                      )}
                    </div>
                  );
                })}
              </div>
            ) : (
              <div class="empty-state">
                <p>You haven't joined any challenges yet.</p>
                <a href="/challenges" class="btn btn-primary">Find Challenges</a>
              </div>
            )}
          </section>
        </div>
        
        <div class="profile-sidebar">
          <section class="profile-section">
            <h2>Account Settings</h2>
            
            <form id="profile-form" class="profile-form">
              <div class="form-group">
                <label for="username" class="form-label">Username</label>
                <input 
                  type="text" 
                  id="username" 
                  name="username"
                  class="form-control"
                  value={profile?.username || ''} 
                />
              </div>
              
              <div class="form-group">
                <label for="fullName" class="form-label">Full Name</label>
                <input 
                  type="text" 
                  id="fullName" 
                  name="fullName"
                  class="form-control"
                  value={profile?.full_name || ''} 
                />
              </div>
              
              <div class="form-group">
                <label for="avatarUrl" class="form-label">Avatar URL</label>
                <input 
                  type="text" 
                  id="avatarUrl" 
                  name="avatarUrl"
                  class="form-control"
                  value={profile?.avatar_url || ''} 
                  placeholder="https://example.com/avatar.jpg"
                />
                
                <div class="help-text">Enter a URL to an image for your profile picture</div>
              </div>
              
              <div class="form-group">
                <label for="email" class="form-label">Email</label>
                <input 
                  type="email" 
                  id="email" 
                  name="email"
                  class="form-control disabled"
                  value={user?.email || ''} 
                  disabled 
                />
                <div class="help-text">Email cannot be changed</div>
              </div>
              
              <div id="update-message" class="update-message"></div>
              
              <button type="submit" class="btn btn-primary">Save Changes</button>
            </form>
          </section>
        </div>
      </div>
    </div>
  </main>
</Layout>

<script>
  import { supabase } from '../lib/supabase';
  
  // Handle profile update
  document.getElementById('profile-form')?.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const username = document.getElementById('username').value;
    const fullName = document.getElementById('fullName').value;
    const avatarUrl = document.getElementById('avatarUrl').value;
    const updateMessage = document.getElementById('update-message');
    const submitButton = e.target.querySelector('button[type="submit"]');
    
    // Show loading state
    if (submitButton) {
      submitButton.disabled = true;
      submitButton.innerText = 'Saving...';
    }
    
    updateMessage.className = 'update-message';
    updateMessage.textContent = '';
    
    try {
      // Get current user
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) throw new Error('User not authenticated');
      
      // Update profile
      const { error } = await supabase
        .from('profiles')
        .update({
          username,
          full_name: fullName,
          avatar_url: avatarUrl,
          updated_at: new Date().toISOString()
        })
        .eq('id', user.id);
        
      if (error) throw error;
      
      updateMessage.textContent = 'Profile updated successfully!';
      updateMessage.className = 'update-message success';
      
      // Preview avatar update without page refresh
      const avatarImg = document.querySelector('.profile-avatar img');
      const avatarPlaceholder = document.querySelector('.profile-avatar .avatar-placeholder');
      
      if (avatarUrl) {
        if (avatarImg) {
          avatarImg.src = avatarUrl;
        } else if (avatarPlaceholder) {
          const img = document.createElement('img');
          img.src = avatarUrl;
          img.alt = 'Profile';
          avatarPlaceholder.parentNode.replaceChild(img, avatarPlaceholder);
        }
      }
      
      // Update displayed name without page refresh
      if (fullName) {
        const nameElement = document.querySelector('.profile-info h1');
        if (nameElement) {
          nameElement.textContent = fullName;
        }
      }
      
      // Update displayed username without page refresh
      if (username) {
        const usernameElement = document.querySelector('.profile-info .username');
        if (usernameElement) {
          usernameElement.textContent = `@${username}`;
        }
      }
      
      // Clear message after 3 seconds
      setTimeout(() => {
        updateMessage.textContent = '';
        updateMessage.className = 'update-message';
      }, 3000);
      
    } catch (error) {
      console.error('Error updating profile:', error);
      updateMessage.textContent = `Error: ${error.message}`;
      updateMessage.className = 'update-message error';
    } finally {
      // Reset button state
      if (submitButton) {
        submitButton.disabled = false;
        submitButton.innerText = 'Save Changes';
      }
    }
  });
</script>

<style>
  main {
    padding: var(--spacing-xl) 0;
  }
  
  .profile-header {
    display: flex;
    align-items: center;
    gap: var(--spacing-md);
    margin-bottom: var(--spacing-xl);
  }
  
  .profile-avatar {
    width: 100px;
    height: 100px;
    border-radius: 50%;
    overflow: hidden;
    flex-shrink: 0;
    box-shadow: var(--shadow-sm);
  }
  
  .profile-avatar img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
  
  .avatar-placeholder {
    width: 100%;
    height: 100%;
    background-color: var(--color-primary);
    color: white;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 2.5rem;
    font-weight: 600;
  }
  
  .profile-info h1 {
    margin: 0 0 var(--spacing-xs) 0;
  }
  
  .username {
    color: var(--color-text-light);
    margin: 0 0 var(--spacing-xs) 0;
    font-size: 1.1rem;
  }
  
  .admin-badge {
    display: inline-block;
    background-color: var(--color-primary);
    color: white;
    padding: 0.25rem 0.5rem;
    border-radius: var(--radius-sm);
    font-size: 0.75rem;
    font-weight: 500;
  }
  
  .profile-layout {
    display: grid;
    grid-template-columns: 2fr 1fr;
    gap: var(--spacing-xl);
  }
  
  .profile-section {
    background-color: var(--color-white);
    border-radius: var(--radius-md);
    padding: var(--spacing-lg);
    box-shadow: var(--shadow-sm);
    margin-bottom: var(--spacing-xl);
  }
  
  .profile-section h2 {
    margin-top: 0;
    margin-bottom: var(--spacing-md);
    font-size: 1.25rem;
  }
  
  .section-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: var(--spacing-md);
  }
  
  .section-header h2 {
    margin: 0;
  }
  
  .stats-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    gap: var(--spacing-md);
  }
  
  .stat-card {
    display: flex;
    align-items: center;
    padding: var(--spacing-md);
    background-color: var(--color-background);
    border-radius: var(--radius-md);
  }
  
  .stat-icon {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 40px;
    height: 40px;
    border-radius: 50%;
    background-color: rgba(255, 90, 95, 0.1);
    color: var(--color-primary);
    margin-right: var(--spacing-md);
    flex-shrink: 0;
  }
  
  .stat-content {
    flex: 1;
  }
  
  .stat-value {
    font-size: 1.5rem;
    font-weight: 700;
    line-height: 1.2;
  }
  
  .stat-label {
    font-size: 0.75rem;
    color: var(--color-text-light);
  }
  
  .challenges-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    gap: var(--spacing-md);
  }
  
  .challenge-card {
    background-color: var(--color-background);
    border-radius: var(--radius-md);
    padding: var(--spacing-md);
    position: relative;
    border-left: 3px solid var(--color-border);
  }
  
  .challenge-card.active {
    border-left-color: var(--color-primary);
  }
  
  .challenge-card.upcoming {
    border-left-color: var(--color-secondary);
  }
  
  .challenge-card.completed {
    border-left-color: var(--color-text-light);
  }
  
  .challenge-status {
    position: absolute;
    top: var(--spacing-md);
    right: var(--spacing-md);
    padding: 0.1rem 0.5rem;
    background-color: var(--color-border);
    border-radius: var(--radius-sm);
    font-size: 0.7rem;
    font-weight: 500;
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }
  
  .active .challenge-status {
    background-color: rgba(255, 90, 95, 0.1);
    color: var(--color-primary);
  }
  
  .upcoming .challenge-status {
    background-color: rgba(0, 166, 153, 0.1);
    color: var(--color-secondary);
  }
  
  .completed .challenge-status {
    background-color: rgba(118, 118, 118, 0.1);
    color: var(--color-text-light);
  }
  
  .challenge-card h3 {
    font-size: 1.1rem;
    margin: 0 0 var(--spacing-sm) 0;
    padding-right: 70px; /* Space for status badge */
  }
  
  .challenge-dates {
    font-size: 0.875rem;
    color: var(--color-text-light);
    margin-bottom: var(--spacing-sm);
  }
  
  .challenge-goal {
    font-size: 0.875rem;
    margin-bottom: var(--spacing-md);
  }
  
  .empty-state {
    background-color: var(--color-background);
    border-radius: var(--radius-md);
    padding: var(--spacing-lg);
    text-align: center;
  }
  
  .empty-state p {
    color: var(--color-text-light);
    margin-bottom: var(--spacing-md);
  }
  
  .profile-form .form-group {
    margin-bottom: var(--spacing-md);
  }
  
  .help-text {
    font-size: 0.75rem;
    color: var(--color-text-light);
    margin-top: var(--spacing-xs);
  }
  
  .form-control.disabled {
    background-color: var(--color-background);
    cursor: not-allowed;
  }
  
  .update-message {
    margin: var(--spacing-md) 0;
    padding: var(--spacing-sm) var(--spacing-md);
    border-radius: var(--radius-md);
    font-size: 0.875rem;
  }
  
  .update-message.success {
    background-color: rgba(0, 166, 153, 0.1);
    color: var(--color-success);
  }
  
  .update-message.error {
    background-color: rgba(255, 90, 95, 0.1);
    color: var(--color-error);
  }
  
  @media (max-width: 960px) {
    .profile-layout {
      grid-template-columns: 1fr;
    }
    
    .stats-grid {
      grid-template-columns: repeat(2, 1fr);
    }
  }
  
  @media (max-width: 640px) {
    .profile-header {
      flex-direction: column;
      text-align: center;
    }
    
    .stats-grid {
      grid-template-columns: 1fr;
    }
  }
</style>